{"version":3,"sources":["HeaderInput.js","ListItem.js","ListContainer.js","App.js","serviceWorker.js","index.js"],"names":["HeaderInput","props","handleChange","e","setState","item","value","state","onAdd","this","style","width","display","flexDirection","alignItems","marginBottom","Typography","variant","color","component","TextField","autoFocus","margin","fullWidth","label","onChange","target","Button","onClick","React","Component","AddButtons","changeinput","name","changeable","targetvalue","trim","mouseEntered","ButtonGroup","onDelete","index","ListItem","changeType","bool","done","inputValue","marginTop","onMouseEnter","onMouseLeave","makeDone","ListContainer","id","Arr","Items","arr","map","i","key","App","clickHandler","text","newArr","concat","splice","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.118a0f35.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Typography, TextField, Button } from \"@material-ui/core\";\r\n\r\n\r\nexport default class HeaderInput extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            item: \"\",\r\n        }\r\n    }\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            item: e.value,\r\n        })\r\n    }\r\n    render() {\r\n        const { onAdd } = this.props;\r\n        return (\r\n            <span style={{ width: \"30%\", display: \"flex\", flexDirection: \"column\", alignItems: \"center\",marginBottom: \"20px\" }}>\r\n                <Typography variant=\"h3\" color=\"primary\" component=\"h2\" >\r\n                TO DO LIST\r\n                </Typography>\r\n                <TextField autoFocus margin = \"normal\" color=\"primary\" variant=\"outlined\" fullWidth label=\"Add Item\" value={this.state.item} onChange={(e) => { this.handleChange(e.target) }} />\r\n                <Button variant=\"contained\" color=\"primary\"  fullWidth onClick={() => {this.setState({item: \"\"}); return onAdd(this.state.item) }}>Add</Button>\r\n            </span>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport 'font-awesome/css/font-awesome.min.css';\r\nimport { Button, TextField } from \"@material-ui/core\";\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\n\r\n\r\nclass AddButtons extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            name: \"Edit\"\r\n        }\r\n    }\r\n    changeinput = () => {\r\n        if (this.state.name === \"Edit\") {\r\n            this.setState({ name: \"Done\" });\r\n            this.props.changeable(true);\r\n        } else {\r\n            if(!this.props.targetvalue.trim()){return}\r\n            this.setState({ name: \"Edit\" });\r\n            this.props.changeable(false);\r\n        }\r\n    }\r\n    render() {\r\n        if (this.props.mouseEntered) {\r\n            return (\r\n                <ButtonGroup\r\n                    variant=\"contained\"\r\n                    color=\"default\"\r\n                    fullWidth\r\n                >\r\n                    <Button onClick={this.changeinput}>{this.state.name}</Button>\r\n                    <Button onClick={() => { this.props.onDelete(this.props.index) }}>Delete</Button>\r\n                </ButtonGroup>\r\n            )\r\n        } else {\r\n            return (null)\r\n        }\r\n    }\r\n}\r\nexport default class ListItem extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            mouseEntered: false,\r\n            done: false,\r\n            changeable: false,\r\n            inputValue: this.props.item.value,\r\n            targetvalue: \"\",\r\n        }\r\n    }\r\n    changeType = (bool) => {\r\n        this.setState({\r\n            changeable: bool,\r\n        })\r\n    }    \r\n    render() {\r\n        return (\r\n            <span style={{ width: \"100%\", marginTop: \"20px\", display: \"flex\", flexDirection: \"column\" }}  onMouseEnter={() => { this.setState({ mouseEntered: true }) }} onMouseLeave={() => { this.setState({ mouseEntered: false }) }}>\r\n                {\r\n                    this.state.changeable ?\r\n                        <TextField\r\n                            fullWidth\r\n                            color=\"primary\"\r\n                            variant=\"outlined\"\r\n                            value={this.props.item.value}\r\n                            onChange={(e)=>{this.setState({targetvalue: e.target.value}); this.props.changeinput(e,this.props.index)}} />\r\n                        :\r\n                        <Button\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color={this.props.item.done ? \"primary\" : \"secondary\"}\r\n                            onClick={()=>{this.props.makeDone(this.props.index)}}\r\n                        >{this.props.item.value}</Button>}\r\n                <span>\r\n                    <AddButtons \r\n                        targetvalue={this.state.targetvalue}\r\n                        value={this.state.inputValue} \r\n                        onDelete={this.props.onDelete} \r\n                        index={this.props.index} \r\n                        changeable={this.changeType} \r\n                        mouseEntered={this.state.mouseEntered} />\r\n                </span>\r\n            </span>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport ListItem from './ListItem';\r\nexport default class ListContainer extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.id = 0;\r\n        this.state = { Arr: [] }\r\n    }\r\n    render() {\r\n        let Items = [...this.props.arr];\r\n        return (\r\n            <div style={{ width: \"30%\", display: \"flex\", flexDirection: \"column\" }}>\r\n                {\r\n                    Items.map((item, i) => {\r\n                        return <ListItem\r\n                            changeinput={this.props.changeinput}\r\n                            makeDone={this.props.makeDone}\r\n                            item={item}\r\n                            index={i}\r\n                            onDelete={this.props.onDelete}\r\n                            key={i} />\r\n                    })\r\n                }\r\n            </div>)\r\n    }\r\n}","import React from 'react';\nimport Header from './HeaderInput';\nimport ListContainer from './ListContainer';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      Arr: []\n    }\n  }\n  clickHandler = (text) => {\n    if (text.trim()) {\n      let newArr = [...this.state.Arr];\n      newArr = newArr.concat({ value: text, done: false });\n      this.setState({ Arr: newArr })\n    } else {\n      return\n    }\n  }\n  onDelete = (i) => {\n    const newArr = [...this.state.Arr];\n    newArr.splice(i, 1);\n    this.setState({ Arr: [...newArr] });\n  }\n  makeDone = (i) => {\n    const newArr = [...this.state.Arr];\n    newArr[i].done = true;\n    this.setState({ Arr: [...newArr] });\n  }\n  changeinput = (e, i) => {\n    const newArr = [...this.state.Arr];\n    newArr[i].value = e.target.value;\n    newArr[i].done = false;\n    this.setState({ Arr: [...newArr] });\n  }\n  render() {\n    return (\n      <div style={{ width: \"100%\", display: \"flex\", flexDirection: \"column\", alignItems: \"center\", }}>\n        <Header onAdd={this.clickHandler} />\n        <ListContainer \n        changeinput={this.changeinput} \n        arr={this.state.Arr} \n        makeDone={this.makeDone}\n        onDelete={this.onDelete} />\n      </div>\n    )\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}